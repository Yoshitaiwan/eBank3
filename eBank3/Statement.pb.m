// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Statement.pb.h"

@implementation StatementRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [StatementRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Statement ()
@property (retain) NSMutableArray* mutableRecordsList;
@end

@implementation Statement

@synthesize mutableRecordsList;
- (void) dealloc {
  self.mutableRecordsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static Statement* defaultStatementInstance = nil;
+ (void) initialize {
  if (self == [Statement class]) {
    defaultStatementInstance = [[Statement alloc] init];
  }
}
+ (Statement*) defaultInstance {
  return defaultStatementInstance;
}
- (Statement*) defaultInstance {
  return defaultStatementInstance;
}
- (NSArray*) recordsList {
  return mutableRecordsList;
}
- (Record*) recordsAtIndex:(int32_t) index {
  id value = [mutableRecordsList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Record* element in self.recordsList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Record* element in self.recordsList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Statement*) parseFromData:(NSData*) data {
  return (Statement*)[[[Statement builder] mergeFromData:data] build];
}
+ (Statement*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Statement*)[[[Statement builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Statement*) parseFromInputStream:(NSInputStream*) input {
  return (Statement*)[[[Statement builder] mergeFromInputStream:input] build];
}
+ (Statement*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Statement*)[[[Statement builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Statement*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Statement*)[[[Statement builder] mergeFromCodedInputStream:input] build];
}
+ (Statement*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Statement*)[[[Statement builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Statement_Builder*) builder {
  return [[[Statement_Builder alloc] init] autorelease];
}
+ (Statement_Builder*) builderWithPrototype:(Statement*) prototype {
  return [[Statement builder] mergeFrom:prototype];
}
- (Statement_Builder*) builder {
  return [Statement builder];
}
@end

@interface Statement_Builder()
@property (retain) Statement* result;
@end

@implementation Statement_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Statement alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Statement_Builder*) clear {
  self.result = [[[Statement alloc] init] autorelease];
  return self;
}
- (Statement_Builder*) clone {
  return [Statement builderWithPrototype:result];
}
- (Statement*) defaultInstance {
  return [Statement defaultInstance];
}
- (Statement*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Statement*) buildPartial {
  Statement* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Statement_Builder*) mergeFrom:(Statement*) other {
  if (other == [Statement defaultInstance]) {
    return self;
  }
  if (other.mutableRecordsList.count > 0) {
    if (result.mutableRecordsList == nil) {
      result.mutableRecordsList = [NSMutableArray array];
    }
    [result.mutableRecordsList addObjectsFromArray:other.mutableRecordsList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Statement_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Statement_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Record_Builder* subBuilder = [Record builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRecords:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) recordsList {
  if (result.mutableRecordsList == nil) { return [NSArray array]; }
  return result.mutableRecordsList;
}
- (Record*) recordsAtIndex:(int32_t) index {
  return [result recordsAtIndex:index];
}
- (Statement_Builder*) replaceRecordsAtIndex:(int32_t) index with:(Record*) value {
  [result.mutableRecordsList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Statement_Builder*) addAllRecords:(NSArray*) values {
  if (result.mutableRecordsList == nil) {
    result.mutableRecordsList = [NSMutableArray array];
  }
  [result.mutableRecordsList addObjectsFromArray:values];
  return self;
}
- (Statement_Builder*) clearRecordsList {
  result.mutableRecordsList = nil;
  return self;
}
- (Statement_Builder*) addRecords:(Record*) value {
  if (result.mutableRecordsList == nil) {
    result.mutableRecordsList = [NSMutableArray array];
  }
  [result.mutableRecordsList addObject:value];
  return self;
}
@end

@interface Record ()
@property (retain) NSString* book;
@property (retain) NSString* account;
@property int64_t amount;
@property (retain) NSString* narrative;
@property int64_t timeStampInsert;
@property int64_t accumBal;
@end

@implementation Record

- (BOOL) hasBook {
  return !!hasBook_;
}
- (void) setHasBook:(BOOL) value {
  hasBook_ = !!value;
}
@synthesize book;
- (BOOL) hasAccount {
  return !!hasAccount_;
}
- (void) setHasAccount:(BOOL) value {
  hasAccount_ = !!value;
}
@synthesize account;
- (BOOL) hasAmount {
  return !!hasAmount_;
}
- (void) setHasAmount:(BOOL) value {
  hasAmount_ = !!value;
}
@synthesize amount;
- (BOOL) hasNarrative {
  return !!hasNarrative_;
}
- (void) setHasNarrative:(BOOL) value {
  hasNarrative_ = !!value;
}
@synthesize narrative;
- (BOOL) hasTimeStampInsert {
  return !!hasTimeStampInsert_;
}
- (void) setHasTimeStampInsert:(BOOL) value {
  hasTimeStampInsert_ = !!value;
}
@synthesize timeStampInsert;
- (BOOL) hasAccumBal {
  return !!hasAccumBal_;
}
- (void) setHasAccumBal:(BOOL) value {
  hasAccumBal_ = !!value;
}
@synthesize accumBal;
- (void) dealloc {
  self.book = nil;
  self.account = nil;
  self.narrative = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.book = @"";
    self.account = @"";
    self.amount = 0L;
    self.narrative = @"";
    self.timeStampInsert = 0L;
    self.accumBal = 0L;
  }
  return self;
}
static Record* defaultRecordInstance = nil;
+ (void) initialize {
  if (self == [Record class]) {
    defaultRecordInstance = [[Record alloc] init];
  }
}
+ (Record*) defaultInstance {
  return defaultRecordInstance;
}
- (Record*) defaultInstance {
  return defaultRecordInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasBook) {
    [output writeString:1 value:self.book];
  }
  if (self.hasAccount) {
    [output writeString:2 value:self.account];
  }
  if (self.hasAmount) {
    [output writeInt64:3 value:self.amount];
  }
  if (self.hasNarrative) {
    [output writeString:4 value:self.narrative];
  }
  if (self.hasTimeStampInsert) {
    [output writeInt64:5 value:self.timeStampInsert];
  }
  if (self.hasAccumBal) {
    [output writeInt64:6 value:self.accumBal];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasBook) {
    size += computeStringSize(1, self.book);
  }
  if (self.hasAccount) {
    size += computeStringSize(2, self.account);
  }
  if (self.hasAmount) {
    size += computeInt64Size(3, self.amount);
  }
  if (self.hasNarrative) {
    size += computeStringSize(4, self.narrative);
  }
  if (self.hasTimeStampInsert) {
    size += computeInt64Size(5, self.timeStampInsert);
  }
  if (self.hasAccumBal) {
    size += computeInt64Size(6, self.accumBal);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Record*) parseFromData:(NSData*) data {
  return (Record*)[[[Record builder] mergeFromData:data] build];
}
+ (Record*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Record*)[[[Record builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Record*) parseFromInputStream:(NSInputStream*) input {
  return (Record*)[[[Record builder] mergeFromInputStream:input] build];
}
+ (Record*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Record*)[[[Record builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Record*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Record*)[[[Record builder] mergeFromCodedInputStream:input] build];
}
+ (Record*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Record*)[[[Record builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Record_Builder*) builder {
  return [[[Record_Builder alloc] init] autorelease];
}
+ (Record_Builder*) builderWithPrototype:(Record*) prototype {
  return [[Record builder] mergeFrom:prototype];
}
- (Record_Builder*) builder {
  return [Record builder];
}
@end

@interface Record_Builder()
@property (retain) Record* result;
@end

@implementation Record_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Record alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Record_Builder*) clear {
  self.result = [[[Record alloc] init] autorelease];
  return self;
}
- (Record_Builder*) clone {
  return [Record builderWithPrototype:result];
}
- (Record*) defaultInstance {
  return [Record defaultInstance];
}
- (Record*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Record*) buildPartial {
  Record* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Record_Builder*) mergeFrom:(Record*) other {
  if (other == [Record defaultInstance]) {
    return self;
  }
  if (other.hasBook) {
    [self setBook:other.book];
  }
  if (other.hasAccount) {
    [self setAccount:other.account];
  }
  if (other.hasAmount) {
    [self setAmount:other.amount];
  }
  if (other.hasNarrative) {
    [self setNarrative:other.narrative];
  }
  if (other.hasTimeStampInsert) {
    [self setTimeStampInsert:other.timeStampInsert];
  }
  if (other.hasAccumBal) {
    [self setAccumBal:other.accumBal];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Record_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Record_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setBook:[input readString]];
        break;
      }
      case 18: {
        [self setAccount:[input readString]];
        break;
      }
      case 24: {
        [self setAmount:[input readInt64]];
        break;
      }
      case 34: {
        [self setNarrative:[input readString]];
        break;
      }
      case 40: {
        [self setTimeStampInsert:[input readInt64]];
        break;
      }
      case 48: {
        [self setAccumBal:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasBook {
  return result.hasBook;
}
- (NSString*) book {
  return result.book;
}
- (Record_Builder*) setBook:(NSString*) value {
  result.hasBook = YES;
  result.book = value;
  return self;
}
- (Record_Builder*) clearBook {
  result.hasBook = NO;
  result.book = @"";
  return self;
}
- (BOOL) hasAccount {
  return result.hasAccount;
}
- (NSString*) account {
  return result.account;
}
- (Record_Builder*) setAccount:(NSString*) value {
  result.hasAccount = YES;
  result.account = value;
  return self;
}
- (Record_Builder*) clearAccount {
  result.hasAccount = NO;
  result.account = @"";
  return self;
}
- (BOOL) hasAmount {
  return result.hasAmount;
}
- (int64_t) amount {
  return result.amount;
}
- (Record_Builder*) setAmount:(int64_t) value {
  result.hasAmount = YES;
  result.amount = value;
  return self;
}
- (Record_Builder*) clearAmount {
  result.hasAmount = NO;
  result.amount = 0L;
  return self;
}
- (BOOL) hasNarrative {
  return result.hasNarrative;
}
- (NSString*) narrative {
  return result.narrative;
}
- (Record_Builder*) setNarrative:(NSString*) value {
  result.hasNarrative = YES;
  result.narrative = value;
  return self;
}
- (Record_Builder*) clearNarrative {
  result.hasNarrative = NO;
  result.narrative = @"";
  return self;
}
- (BOOL) hasTimeStampInsert {
  return result.hasTimeStampInsert;
}
- (int64_t) timeStampInsert {
  return result.timeStampInsert;
}
- (Record_Builder*) setTimeStampInsert:(int64_t) value {
  result.hasTimeStampInsert = YES;
  result.timeStampInsert = value;
  return self;
}
- (Record_Builder*) clearTimeStampInsert {
  result.hasTimeStampInsert = NO;
  result.timeStampInsert = 0L;
  return self;
}
- (BOOL) hasAccumBal {
  return result.hasAccumBal;
}
- (int64_t) accumBal {
  return result.accumBal;
}
- (Record_Builder*) setAccumBal:(int64_t) value {
  result.hasAccumBal = YES;
  result.accumBal = value;
  return self;
}
- (Record_Builder*) clearAccumBal {
  result.hasAccumBal = NO;
  result.accumBal = 0L;
  return self;
}
@end

